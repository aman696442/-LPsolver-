# -LPsolver-
#i have solved my part as decided
import matplotlib.pyplot as plt

import numpy as np

objective=[1,3]
constraint1=[10,5,4,3]
constraint2=[(1,2),(1,0),(0,1),(1,0)]

class LPsolver():
    def plotting_constraint(self,a,b):
        max_x=0
        max_y=0
        for i in range(len(a)):
            if(b[i][0]==0):
                temp1=0
                temp2=float(a[i]/b[i][1])
            elif(b[i][1]==0):
                temp1=(a[i]/b[i][0])
                temp2=0
            else:
                temp1=float(a[i]/b[i][0])
                temp2=float(a[i]/b[i][1])
            if(temp1>max_x):
                max_x=temp1
            if(temp2>max_y):
                max_y=temp2    
        for i in range(len(a)):
            if(b[i][0]==0):
                plt.fill_between([0,max_x+4],[(a[i]/b[i][1]),(a[i]/b[i][1])] ,alpha=0.5)
                plt.plot([0,max_x+4],[(a[i]/b[i][1]),(a[i]/b[i][1])])
            elif(b[i][1]==0):
                plt.fill_between([(a[i]/b[i][0]),(a[i]/b[i][0])],[0,max_y+5] ,alpha=0.5)
                plt.plot([(a[i]/b[i][0]),(a[i]/b[i][0])],[0,max_y+5])
            else:
                plt.fill_between([0,(a[i]/b[i][0])],[(a[i]/b[i][1]),0],alpha=0.5)
                plt.plot([0,(a[i]/b[i][0])],[(a[i]/b[i][1]),0])
        plt.xlabel('X-AXIS');
        plt.ylabel('Y-AXIS');        
        plt.annotate('Simplex Method',xy=(max_x,max_y),xytext=(max_x,max_y))         
    def solve(self,a,b,c):
        self.plotting_constraint(b,c)                 
        lenght_b=len(b)
        lenght_a=len(a)
        iarray=np.array(c)
        iarray=np.concatenate((iarray,np.identity(len(b))),1)
##        print 'iarray=', iarray
        b=np.array(b)
        x=[0]*lenght_a

        iarray=np.insert(iarray,len(a)+lenght_b,b,1)
        B=np.array([0]*lenght_b)
        C=np.array(a+[0]*lenght_b)
        bx=range(lenght_a,lenght_a+lenght_b)
        while(1):
            
            maxpos=[]
            minpos=[]
            for i in range(lenght_a+lenght_b):
                maxpos.append(C[i]-np.dot(B,iarray[:,i]))


            c=maxpos.index(max(maxpos))
            for i in range(len(bx)):
                if bx[i]<lenght_a:
                    x[bx[i]]=iarray[i,-1]    
            s='('+str(x[0])+','+str(x[1])+')'
            plt.annotate(s,xy=(x[0],x[1]),xytext=(x[0],x[1]+0.1))
            plt.plot([x[0]],[x[1]],' ',marker='o',color='r')
##            print x
            if maxpos[c]<=0:
                break
            for i in range(lenght_b):
                if iarray[i,c]!=0:
                    minpos.append(iarray[i,-1]/iarray[i,c])
                else:
                    minpos.append(10000000000)
            q=filter(lambda x:x>0,minpos)
            if q==[]:
                return "unbounded function"
                break
            #i have seen your part and completed the question



            r=minpos.index(min(q))

            B[r]=C[c]
            bx[r]=c
             
            iarray[r,:]=iarray[r,:]/iarray[r,c]
            for i in range(lenght_b):
                if(i!=r):
                    iarray[i,:]=iarray[i,:]-(iarray[i,c]/iarray[r,c])*iarray[r,:]
        for i in range(len(bx)):
            if bx[i]<lenght_a:
                x[bx[i]]=iarray[i,-1]
                
         

        x.append(sum([x[i]*a[i] for i in range(lenght_a)]))
        s='('+str(x[0])+','+str(x[1])+')'
        plt.annotate(s,xy=(x[0],x[1]),xytext=(x[0],x[1]+0.1))
        plt.annotate('solution',xy=(x[0],x[1]),xytext=(x[0]+.5,x[1]+0.5))
        plt.plot([x[0]],[x[1]],' ',marker='o',color='r')
        plt.plot([x[0],float(x[2]/a[0])],[x[1],0],'-.',color='r')
        
        plt.show()
        return x


lps=LPsolver()
solution=lps.solve(objective,constraint1,constraint2)
print solution





